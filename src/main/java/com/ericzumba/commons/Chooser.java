package com.ericzumba.commons;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.function.Function;

import static java.util.Arrays.asList;
import static java.util.Collections.unmodifiableList;

/*
 * This Java source file was auto generated by running 'gradle buildInit --type java-library'
 * by 'ericzumba' at '11/10/16 12:13 AM' with Gradle 3.1
 *
 * @author ericzumba, @date 11/10/16 12:13 AM
 */
public class Chooser<T, R> {
    public final List<Function<T, R>> choices;
    public final Map<T, Function<T, R>> knowledge;
    private Function<R, Function<T, R>> rule;

    public Chooser(Map<T, Function<T, R>> knowledge, Function<T, R>... choices) {
        this.knowledge = knowledge;
        this.choices = unmodifiableList(asList(choices));
    }

    public Chooser<T, R> installRule(Function<R, Function<T, R>> rule) {
        this.rule = rule;
        return this;
    }

    public R choose(T t) {
        Function<T, R> choice = knowledge.get(t);
        if(choice == null)
            return register(t, choices.get(0).apply(t));
        return register(t, choice.apply(t));
    }

    public Function<T, R> choices(int i){
        return choices.get(i);
    }

    private R register(T t, R r) {
        knowledge.put(t, rule.apply(r));
        return r;
    }
}
